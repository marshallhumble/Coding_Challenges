#!/usr/bin/env python

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import math
import time
from functools import reduce


def factors(n):
    return set(reduce(list.__add__, ([i, n // i] for i in range(1, int(math.sqrt(n)) + 1) if n % i == 0)))


def triangular_number(n):
    y = n * (n + 1) / 2
    return int(y)


def find_fac():
    i = 2
    y = 2
    while len(list(factors(y))) < 500:
        i += 1
        y = triangular_number(i)

    return y


start = time.time()
print(find_fac())

elapsed = (time.time() - start)
print("\nThis code took: {} seconds".format(str(elapsed)))


def test_function():
    assert find_fac() == 76576500
